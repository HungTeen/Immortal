plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev'
//    id 'net.neoforged.gradle.userdev'
}

version = mod_version
base {
    archivesName = "${mod_name}-neoforge-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withSourcesJar()
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

neoForge {
    version = neo_version

    validateAccessTransformers = true
    accessTransformers.files.setFrom("src/main/resources/META-INF/accesstransformer.cfg")

    parchment {
        // Get versions from https://parchmentmc.org/docs/getting-started
        // Omit the "v"-prefix in mappingsVersion
        minecraftVersion = parchment_version
        mappingsVersion = mappings_version
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG
        }
        client {
            client()
        }

        server {
            server()
//            programArgument '--nogui'
        }

        data {
            data()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { // Curseforge maven.
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven { // Jade.
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

//    compileOnly "vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-NEOFORGE:api"
//    localRuntime "vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-NEOFORGE"

    implementation "curse.maven:jade-324717:${jade_version}"

//    implementation "curse.maven:configured-457570:${configured_version}"

    implementation("hungteen.htlib:HTLib:${minecraft_version}-${htlib_version}-neoforge")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neoforge_version_range : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_display_name       : mod_display_name,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_license            : mod_license,
            mod_logo_file          : mod_logo_file,
            mod_description        : mod_description,
            mod_issue_url          : mod_issue_url,
            mod_update_url         : mod_update_url,
            mod_display_url        : mod_display_url,
            htlib_version_range    : htlib_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(["pack.mcmeta", 'META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_display_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : mod_version, // We are version 1 of ourselves
                'Implementation-Title'    : mod_display_name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Minecraft"      : minecraft_version,
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'api'

    include "hungteen/${mod_id}/api/**"

    // Sources included because of MinecraftForge/ForgeGradle#369
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = mod_name
            version "${minecraft_version}-${mod_version}-neoforge"
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.getRelease().set(21)
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}