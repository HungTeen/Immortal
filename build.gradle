buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
//    id 'net.minecraftforge.gradle'
}
apply plugin: 'net.minecraftforge.gradle'

version = mod_version
group = "hungteen.${mod_id}"
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', '${mod_id}'

            mods {
                immortal {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', '${mod_id}'

            mods {
                immortal {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', '${mod_id}'

            mods {
                immortal {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', '${mod_id}'

            args '--mod', 'immortal', '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources/')

            mods {
                immortal {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
     flatDir {
         dir 'F:\\projects\\idea\\HTLib\\build\\libs'
     }
}
repositories {
    mavenCentral()
    maven {
        url "https://maven.blamejared.com"
    }
    maven {// location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {// location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {// Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    //https://www.curseforge.com/minecraft/mc-mods/jade/files
    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")

    //https://www.curseforge.com/minecraft/mc-mods/configured/files
    implementation fg.deobf("curse.maven:configured-457570:${configured_version}")

    implementation fg.deobf("hungteen:htlib:${htlib_version}")
}

task apiJar(type: Jar) {
    classifier = 'api'

    include 'hungteen/immortal/api/**'

    // Sources included because of MinecraftForge/ForgeGradle#369
    from sourceSets.main.allSource
    from sourceSets.main.output
}

artifacts {
    archives apiJar
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "${mod_owner}",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${mod_owner}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
