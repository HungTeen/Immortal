package hungteen.immortal.data;

import com.mojang.datafixers.util.Pair;
import hungteen.htlib.data.HTBlockStateGen;
import hungteen.immortal.common.block.ImmortalBlocks;
import hungteen.immortal.common.block.plants.GourdGrownBlock;
import hungteen.immortal.common.block.plants.GourdStemBlock;
import hungteen.immortal.utils.Util;
import net.minecraft.data.DataGenerator;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.block.Block;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.Arrays;

/**
 * @program: Immortal
 * @author: HungTeen
 * @create: 2022-10-07 12:13
 **/
public class BlockStateGen extends HTBlockStateGen {

    public BlockStateGen(DataGenerator gen, ExistingFileHelper exFileHelper) {
        super(gen, Util.id(), exFileHelper);
    }

    @Override
    protected void registerStatesAndModels() {
        /*
        Special model generated by blockbench & Ignored blocks.
         */
        addedBlocks.addAll(Arrays.asList(
                ImmortalBlocks.SPIRITUAL_STOVE.get(), ImmortalBlocks.ELIXIR_FURNACE.get()
        ));

        /*
        Crops with age property.
         */
        Arrays.asList(
                Pair.of(ImmortalBlocks.GOURD_STEM.get(), GourdStemBlock.AGE)
//                Pair.of(BlockRegister.TOXIC_SHROOM.get(), ToxicShroomBlock.AGE),
        ).forEach(pair -> {
            cropBlockState(pair.getFirst(), pair.getSecond());
        });

//        /*
//        RotatedPillarBlocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_LOG.get(), PVZBlocks.STRIPPED_NUT_LOG.get()
//        ).forEach(b -> {
//            log(b);
//        });
//
//        /*
//        Blocks with 2 textures(top & side).
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_WOOD.get(), PVZBlocks.STRIPPED_NUT_WOOD.get()
//        ).forEach(b -> {
//            wood(b);
//        });
//
//        /*
//        Door Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_DOOR.get()
//        ).forEach(b -> {
//            door(b);
//        });
//
//        /*
//        Trapdoor Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_TRAPDOOR.get()
//        ).forEach(b -> {
//            trapdoor(b);
//        });
//
//        /*
//        Fence Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_FENCE.get()
//        ).forEach(b -> {
//            fence(b);
//        });
//
//        /*
//        Fence Gate Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_FENCE_GATE.get()
//        ).forEach(b -> {
//            fenceGate(b);
//        });
//
//        /*
//        Sign Blocks.
//         */
//        Arrays.asList(
//                Pair.of(PVZBlocks.NUT_SIGN.get(), PVZBlocks.NUT_WALL_SIGN.get())
//        ).forEach(pair -> {
//            sign(pair.getFirst(), pair.getSecond());
//        });
//
//        /*
//        Stair Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_STAIRS.get()
//        ).forEach(b -> {
//            stair(b);
//        });
//
//        /*
//        Button Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_BUTTON.get()
//        ).forEach(b -> {
//            button(b);
//        });
//
//        /*
//        Slab Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_SLAB.get()
//        ).forEach(b -> {
//            slab(b);
//        });
//
//        /*
//        Pressure plate Blocks.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_PRESSURE_PLATE.get()
//        ).forEach(b -> {
//            pressPlate(b);
//        });
//
//        /*
//        Blocks with cross style.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_SAPLING.get()
//        ).forEach(b -> {
//            cross(b);
//            this.addedBlocks.add(b);
//        });

        /**
         * Horizontal Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.GOURD_ATTACHED_STEM.get()
        ).forEach(b -> {
            horizontalBlock(b, models().cubeAll(name(b), blockRes(b)));
            this.addedBlocks.add(b);
        });

        /*
        Common Blocks.
         */
        for (Block block : ForgeRegistries.BLOCKS) {
            if (!block.getRegistryName().getNamespace().equals(this.modId) || addedBlocks.contains(block)) {
                continue;
            }
            if (block instanceof GourdGrownBlock) {//normal block items.
                gourd(block);
            }
        }

        /*
        Last step for all normal block models.
         */
        for (Block b : ForgeRegistries.BLOCKS) {
            if (b.getRegistryName().getNamespace().equals(this.modId) && !addedBlocks.contains(b)) {
                simpleBlock(b);
            }
        }
    }

    protected ResourceLocation blockRes(Block block){
        return new ResourceLocation(block.getRegistryName().getNamespace(), "block/" + block.getRegistryName().getPath());
    }

    public void gourd(Block block) {
        horizontalBlock(block, models().singleTexture(name(block), Util.prefix("gourd_block"), "gourd", blockRes(block)));
        this.addedBlocks.add(block);
    }

}
