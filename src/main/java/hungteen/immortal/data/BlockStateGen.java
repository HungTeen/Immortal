package hungteen.immortal.data;

import hungteen.htlib.data.HTBlockStateGen;
import hungteen.htlib.util.Pair;
import hungteen.htlib.util.helper.BlockHelper;
import hungteen.immortal.common.block.ImmortalBlocks;
import hungteen.immortal.common.block.plants.GourdGrownBlock;
import hungteen.immortal.common.block.plants.GourdStemBlock;
import hungteen.immortal.utils.Util;
import net.minecraft.data.DataGenerator;
import net.minecraft.world.level.block.Block;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.Arrays;

/**
 * @program: Immortal
 * @author: HungTeen
 * @create: 2022-10-07 12:13
 **/
public class BlockStateGen extends HTBlockStateGen {

    public BlockStateGen(DataGenerator gen, ExistingFileHelper exFileHelper) {
        super(gen, Util.id(), exFileHelper);
    }

    @Override
    protected void registerStatesAndModels() {
        /*
        Special model generated by blockbench & Ignored blocks.
         */
        addedBlocks.addAll(Arrays.asList(
                ImmortalBlocks.SPIRITUAL_FURNACE.get(), ImmortalBlocks.ELIXIR_ROOM.get()
        ));

        /*
        Crops with age property.
         */
//        Arrays.asList(
//                Pair.of(ImmortalBlocks.GOURD_STEM.get(), GourdStemBlock.AGE)
////                Pair.of(BlockRegister.TOXIC_SHROOM.get(), ToxicShroomBlock.AGE),
//        ).forEach(pair -> {
//            crop(pair.getFirst(), pair.getSecond(), cutout());
//        });
        crop(ImmortalBlocks.GOURD_STEM.get(), GourdStemBlock.AGE, cutout());

        /*
        Must gen first to avoid crash.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_PLANKS.get()
        ).forEach(block -> {
            this.addedBlocks.add(block);
            this.simpleBlock(block);
        });

        /*
        RotatedPillarBlocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_LOG.get(), ImmortalBlocks.STRIPPED_MULBERRY_LOG.get()
        ).forEach(this::log);

        /*
        Blocks with 2 textures(top & side).
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_WOOD.get(), ImmortalBlocks.STRIPPED_MULBERRY_WOOD.get()
        ).forEach(this::wood);

        /*
        Door Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_DOOR.get()
        ).forEach(this::door);

        /*
        Trapdoor Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_TRAPDOOR.get()
        ).forEach(this::trapdoor);

        /*
        Fence Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_FENCE.get()
        ).forEach(this::fence);

        /*
        Fence Gate Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_FENCE_GATE.get()
        ).forEach(this::fenceGate);

        /*
        Sign Blocks.
         */
        Arrays.asList(
                Pair.of(ImmortalBlocks.MULBERRY_SIGN.get(), ImmortalBlocks.MULBERRY_WALL_SIGN.get())
        ).forEach(pair -> {
            sign(pair.getFirst(), pair.getSecond());
        });

        /*
        Stair Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_STAIRS.get()
        ).forEach(this::stair);

        /*
        Button Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_BUTTON.get()
        ).forEach(this::button);

        /*
        Slab Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_SLAB.get()
        ).forEach(b -> {
            slab(b);
        });

        /*
        Pressure plate Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_PRESSURE_PLATE.get()
        ).forEach(b -> {
            pressPlate(b);
        });

        /*
        Blocks with cross style.
         */
        Arrays.asList(
                ImmortalBlocks.MULBERRY_SAPLING.get()
        ).forEach(block -> {
            cross(block);
            this.addedBlocks.add(block);
        });

        /**
         * Horizontal Blocks.
         */
        Arrays.asList(
                ImmortalBlocks.GOURD_ATTACHED_STEM.get()
        ).forEach(block -> {
            horizontalBlock(block, models().cubeAll(name(block), BlockHelper.blockTexture(block)).renderType(cutout()));
            this.addedBlocks.add(block);
        });

        /*
        Common Blocks.
         */
        for (Block block : ForgeRegistries.BLOCKS) {
            if (!Util.in(key(block)) || addedBlocks.contains(block)) {
                continue;
            }
            if (block instanceof GourdGrownBlock) {//normal block items.
                gourd(block);
            }
        }

        /*
        Last step for all normal block models.
         */
        for (Block block : ForgeRegistries.BLOCKS) {
            if (Util.in(key(block)) && !addedBlocks.contains(block)) {
                simpleBlock(block);
            }
        }
    }

    /**
     * Cutout gourd blocks.
     */
    public void gourd(Block block) {
        horizontalBlock(block, models().singleTexture(name(block), Util.prefix("gourd_block"), "gourd", BlockHelper.blockTexture(block)).renderType(cutout()));
        this.addedBlocks.add(block);
    }

}
