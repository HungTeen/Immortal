package hungteen.immortal.data;

import hungteen.htlib.data.HTItemModelGen;
import hungteen.immortal.common.item.ImmortalItems;
import hungteen.immortal.utils.Util;
import net.minecraft.data.DataGenerator;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.SpawnEggItem;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.Arrays;

/**
 * @program: Immortal
 * @author: HungTeen
 * @create: 2022-10-06 18:32
 **/
public class ItemModelGen extends HTItemModelGen {

    public ItemModelGen(DataGenerator generator, ExistingFileHelper helper) {
        super(generator, Util.id(), helper);
    }

    @Override
    protected void registerModels() {
        /*
        Special model generated by blockbench.
         */
        addedItems.addAll(Arrays.asList(
//                PVZItems.PEA_GUN.get()
//                ItemRegister.PEA_GUN.get(), ItemRegister.ZOMBIE_FLAG.get(), ItemRegister.BOBSLE_CAR.get(),
//                ItemRegister.SCREEN_DOOR.get(), ItemRegister.JACK_BOX.get(), ItemRegister.BALLOON.get(),
//                ItemRegister.WARNING_SIGN.get(), ItemRegister.ZOMBIE_DOLL.get(), ItemRegister.POLE.get(),
//                ItemRegister.BUCKET_HEAD.get(), ItemRegister.RESOURCE_COLLECTOR.get()
        ));

        /*
        Single add block items so that except adding by method below.
         */
        Arrays.asList(
                ImmortalItems.GOURD_SEEDS.get()
        ).forEach(i -> {
            genNormalModel(i);
            this.addedItems.add(i);
        });

//        /*
//        Fence.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_FENCE.get(), PVZBlocks.NUT_BUTTON.get()
//        ).forEach(block -> {
//            genBlockModel(block, block.getRegistryName().getPath() + "_inventory");
//        });
//
//        /*
//        Trap Door.
//         */
//        Arrays.asList(
//                PVZBlocks.NUT_TRAPDOOR.get()
//        ).forEach(block -> {
//            genBlockModel(block, block.getRegistryName().getPath() + "_bottom");
//        });

        /*
        Block-items with tex in item/
         */
//        Arrays.asList(
//                PVZBlocks.NUT_DOOR.get().asItem(), PVZItems.NUT_SIGN.get(),
//                PVZBlocks.LILY_PAD.get().asItem(), PVZBlocks.FLOWER_POT.get().asItem()
//        ).forEach(i -> {
//            genNormalModel(i);
//            this.addedItems.add(i);
//        });

        /*
        Block-items with tex in block/
         */
//        Arrays.asList(
//                PVZBlocks.NUT_SAPLING
////                BlockRegister.STEEL_LADDER.get()
//        ).forEach(i -> {
//            genItemModelWithBlock(i.get().asItem());
//        });

        /*
        For hand held item.
         */
//        Arrays.asList(
//                PVZItems.ORIGIN_AXE.get(), PVZItems.ORIGIN_HOE.get(), PVZItems.ORIGIN_PICKAXE.get(), PVZItems.ORIGIN_SHOVEL.get(), PVZItems.ORIGIN_SWORD.get()
//        ).forEach(i -> {
//            addedItems.add(i);
//            genHeld(i.getRegistryName().getPath(), Util.prefix("item/" + i.getRegistryName().getPath()));
//        });

        //3 types of sun storage sapling.
//        genSameModelsWithAdd(ItemRegister.SUN_STORAGE_SAPLING.get(), ItemRegister.SMALL_SUN_STORAGE_SAPLING.get(), ItemRegister.LARGE_SUN_STORAGE_SAPLING.get(), ItemRegister.ONCE_SUN_STORAGE_SAPLING.get());


        /*
        For mostly common items.
         */
        for (Item i : ForgeRegistries.ITEMS) {
            if (!i.getRegistryName().getNamespace().equals(this.modid) || addedItems.contains(i)){
                continue;
            }
            if (i instanceof SpawnEggItem) {//for spawn eggs.
                addedItems.add(i);
                getBuilder(i.getRegistryName().getPath()).parent(getExistingFile(new ResourceLocation("item/template_spawn_egg")));
            } else if (i instanceof BlockItem) {//normal block items.
                genBlockModel(((BlockItem) i).getBlock());
            }
        }

        /*
        Last step for all normal item models.
         */
        for (Item i : ForgeRegistries.ITEMS) {
            if (i.getRegistryName().getNamespace().equals(this.modid) && !addedItems.contains(i)) {
                genNormal(i.getRegistryName().getPath(), Util.prefix("item/" + i.getRegistryName().getPath()));
            }
        }
    }
}
